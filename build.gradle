// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: 'depends.gradle'

buildscript {
    ext {
        versions = [
                multidex        : '1.0.2',
//              retrolambda     : '3.7.0',
                sdk             : '27.0.2',
                buildTool       : '28.0.0-rc2',
                constraintLayout: '1.0.2',
                butterKnife     : '8.8.1',
                guava           : '23.3-android',
                storeBox        : '1.4.0',
                DBFlow          : '4.1.1',
                kotlin          : '1.2.31',
                dagger          : '2.12',
                okhttp          : '3.9.0',
                jackson         : '2.9.2',
                rx              : '2.1.7',
                rxAndroid       : '2.0.1',
                netty           : '4.1.16.Final',
                retrofit        : '2.3.0',
                reflections     : '0.9.11',
                apacheCommons   : [
                        codec: '1.11'
                ],
                stetho          : '1.5.0',
                anko            : '0.10.3',
                ktlint          : '2.3.0',

                testJunit       : '4.12',
                testHamcrest    : '1.3',
                testMockito     : '2.0.2-beta',
                testUnitils     : '3.4.6',
                testAssertj     : [
                        java   : '3.8.0',
                        android: '1.2.0'
                ],
                testRunner      : '1.0.1',
                testEspresso    : '3.0.1'
        ]

        checkstyleConfigs = [
                main: file("${rootProject.rootDir}/.assets/checkstyle/checkstyle.xml"),
                test: file("${rootProject.rootDir}/.assets/checkstyle/checkstyle-test.xml")
        ]
    }

    repositories {
        jcenter()
        google()
        maven { url "https://plugins.gradle.org/m2/" }
//      maven { url "https://oss.sonatype.org/content/repositories/snapshots" } // For Butter Knife SNAPSHOT
    }

    configurations {
        ktlint
    }

    dependencies {
        classpath "com.android.tools.build:gradle:3.1.2"
//      classpath "me.tatarka:gradle-retrolambda:${versions.retrolambda}" // Plugin support by java 8, Enable if SDK version < 24

        classpath "com.jakewharton:butterknife-gradle-plugin:${versions.butterKnife}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"

        classpath "gradle.plugin.org.jlleitschuh.gradle:ktlint-gradle:${versions.ktlint}"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
//  configurations.classpath.exclude group: 'com.android.tools.external.lombok'
}

allprojects {

    repositories {
        jcenter()
        mavenCentral()
        google()

        maven { url 'https://www.jitpack.io' }
//      maven { url "https://oss.sonatype.org/content/repositories/snapshots" } // For Butter Knife SNAPSHOT
    }
}

subprojects {
//  apply plugin: 'me.tatarka.retrolambda'  // Plugin support by java 8, Enable if SDK version < 24
//  apply plugin: 'com.jakewharton.butterknife'

    apply plugin: 'checkstyle'
    apply plugin: "org.jlleitschuh.gradle.ktlint"

    checkstyle {
        toolVersion '8.4'
        ignoreFailures false
        showViolations true
    }

    ktlint {
        version = "0.14.0"
        debug = true
        verbose = true
        android = true
        reporter = "checkstyle"
        ignoreFailures = true
    }

    tasks.withType(Checkstyle) {
        reports {
            html.destination rootProject.file("build/reports/checkstyle.html")
        }
    }

    if (project.name.startsWith("lib.common")) {
        return
    }

    if (project.name.startsWith("lib.")) {
        apply plugin: 'com.android.library'
    } else {
        apply plugin: 'com.android.application'

        dependencies {
            implementation project(":lib.widget")
        }
    }

    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-android-extensions'

    kotlin {
        experimental {
            coroutines "enable"
        }
    }

    dependencies {
        implementation project(":lib.common")
        implementation fileTree(dir: 'libs', include: ['*.jar'])

        implementation libs.main.common
        implementation libs.main.guava
        implementation libs.main.kotlin
        implementation libs.main.stetho

        testImplementation libs.test.android
    }

    android {
        compileSdkVersion 27
        buildToolsVersion versions.buildTool

        defaultConfig {
            multiDexEnabled true

            minSdkVersion 26
            targetSdkVersion 27
            versionCode 1
            versionName "1.0"

            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        packagingOptions {
            exclude 'LICENSE.txt'
            exclude 'META-INF/LICENSE'
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE'
            exclude 'META-INF/NOTICE.txt'
        }

        lintOptions {
            abortOnError false
        }
    }

    // For android project
    task checkstyleMain(type: Checkstyle) {
        outputs.upToDateWhen { false }

        source 'src/main'

        include '**/*.java'

        exclude '**/gen/**'
        exclude '**/R.java'
        exclude '**/BuildConfig.java'

        classpath = files()
        configFile = checkstyleConfigs.main
    }

    task checkstyleTest(type: Checkstyle) {
        outputs.upToDateWhen { false }

        source 'src/test'
        source 'src/androidTest'

        include '**/*.java'

        exclude '**/gen/**'
        exclude '**/R.java'
        exclude '**/BuildConfig.java'

        classpath = files()
        configFile = checkstyleConfigs.test
    }

    task checkstyle(dependsOn: [checkstyleMain, checkstyleTest]) {
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
